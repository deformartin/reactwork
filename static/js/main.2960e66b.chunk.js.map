{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","className","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","state","performSearch","searchTerm","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","event","target","style","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPA2BeA,G,yLAtBX,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,I,+BAIvB,OAAO,2BAAQQ,UAAU,QAAQC,IAAKR,KAAKC,MAAMC,MAAMC,IACvD,+BACE,4BACE,4BACE,yBAAKM,IAAI,SAASC,MAAM,MAAMC,IAAKX,KAAKC,MAAMC,MAAMU,cAEtD,4BACE,4BAAKZ,KAAKC,MAAMC,MAAMW,OACtB,2BAAIb,KAAKC,MAAMC,MAAMY,UACrB,2BAAOP,UAAW,SAASQ,KAAK,SAASC,QAAShB,KAAKiB,UAAUC,KAAKlB,MAAOmB,MAAM,iB,GAhBtEC,IAAMC,Y,gBC+EdC,E,YA3Eb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDsB,MAAQ,GAEb,EAAKC,cAAc,YAJF,E,2EAQLC,GAAa,IAAD,OACxBC,QAAQC,IAAI,gCACZ,IAAMC,EAAY,4FAA8FH,EAChHI,IAAEC,KAAK,CACL/B,IAAK6B,EACLG,QAAS,SAACC,GACRN,QAAQC,IAAI,6BACZ,IAAMM,EAAUD,EAAcC,QAE3BC,EAAY,GAEfD,EAAQE,SAAQ,SAACjC,GACfA,EAAMU,WAAa,kCAAoCV,EAAMkC,YAC7D,IAAMC,EAAW,kBAAC,EAAD,CAAU7B,IAAKN,EAAMC,GAAID,MAAOA,IACjDgC,EAAUI,KAAKD,MAGjB,EAAKE,SAAS,CAACC,KAAMN,KAEvBO,MAAO,SAACC,EAAKC,EAAQC,GACnBlB,QAAQe,MAAM,6B,0CAKAI,GAClBnB,QAAQC,IAAIkB,EAAMC,OAAO3B,OACzB,IACMM,EAAaoB,EAAMC,OAAO3B,MADZnB,KAERwB,cAAcC,K,+BAK1B,OACE,6BAED,2BAAOlB,UAAU,YACZ,+BACE,4BACE,4BACE,yBAAKE,IAAI,WAAWC,MAAM,KAAKC,IAAI,wBAErC,wBAAID,MAAM,MACV,4BACE,iDAMR,2BAAOH,UAAW,WAAWwC,MAAO,CAElCC,QAAS,QACTtC,MAAO,MACPuC,WAAY,EACZC,cAAe,EACfC,YAAa,IACZC,SAAUpD,KAAKqD,oBAAoBnC,KAAKlB,MAAOsD,YAAY,uBAE7DtD,KAAKuB,MAAMiB,U,GAtEFnB,aCOEkC,QACW,cAA7BnD,OAAOC,SAASmD,UAEe,UAA7BpD,OAAOC,SAASmD,UAEhBpD,OAAOC,SAASmD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2960e66b.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\n\nclass MovieRow extends React.Component {\n  viewMovie() {\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n    window.location.href = url\n  }\n\n  render() {\n    return <table  className=\"TBody\" key={this.props.movie.id}>\n    <tbody>\n      <tr>\n        <td>\n          <img alt=\"poster\" width=\"150\" src={this.props.movie.poster_src}/>\n        </td>\n        <td>\n          <h3>{this.props.movie.title}</h3>\n          <p>{this.props.movie.overview}</p>\n          <input className= \"button\" type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  }\n}\n\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js'\nimport $ from 'jquery'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props) \n    this.state = {}\n\n    this.performSearch(\"avengers\")\n  } \n\n\n  performSearch(searchTerm) {\n    console.log(\"Perform search using moviedb\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query=\" + searchTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully\")\n        const results = searchResults.results\n\n       var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          const movieRow = <MovieRow key={movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\")\n      }\n    })\n  }\n  \n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n\n  render() {\n    return (\n      <div>\n\n     <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"app icon\" width=\"50\" src=\"green_app_icon.svg\"/>\n              </td>\n              <td width=\"8\"/>\n              <td>\n                <h1>Find My Movies</h1>\n              </td>\n            </tr>\n          </tbody>\n          \n      \n        <input className= \"searchme\" style={{\n          // fontSize: calc(10px + 5vw),\n          display: 'block',\n          width: \"99%\",\n          paddingTop: 8,\n          paddingBottom: 8,\n          paddingLeft: 16\n        }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter search term\"/>\n       </table>\n        {this.state.rows}\n\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}